********************************************************************************
** 	TITLE: 02_clean_demos.do
**
**	PURPOSE: Clean demographic sheets from CPS Site
**							
**	INPUTS:	Scraped FRL files 2013 - $endyear
**			Scraped Race/Ethnicity files 2013 - $endyear
**			Scraped Enrollment files 2013 - $endyear
**	
**	OUTPUTS: ${raw}/02a_demos_2013_$endyear
**				
**	NOTES: 
**
**	AUTHOR: Michael Rosenbaum	
**
**	CREATED: 9/1/17	
********************************************************************************
*Table of Contents
*1. Load and clean data
*2. Merge data and assert
*3. Save and exit


version 14.2
cap log close
set more off

loc cdate = subinstr("`c(current_date)'"," ", "", .) // remove spaces
log using "${logs}/02a_clean_demos_`cdate'.log", replace
di "`cdate'"


*****************************
* 1. Load and append files
*****************************
*A. Enrollment
*B. FRL
*C. Race and ethnicity


**A. Enrollment
	/*
		CPS Demographics files from the website are in approximately the same 
		format, but they have varying formats for variable names. These
		formats can be cleaned using regular expressions from the label
		generated by import excel.
	*/
	forval i = 2013(1)$endyear {
		import excel using "${raw}/Demographics_20thDay_`i'.xls", first clear

		qui ds
		foreach v in `r(varlist)' {

			*Extract excel name from label
			loc vlab: var label `v'

			*Clean grades
			if regexm("`vlab'", "[0-9]") 		ren `v' g`vlab'
			if regexm("`vlab'", "^[kK]" ) 		ren `v' gk
			if regexm("`vlab'", "[pP][kK]") 	ren `v' gpk
			if regexm("`vlab'", "[pP][eE]") 	ren `v' gpe
			
			*Reename ID values
			if regexm("`vlab'", "[iI][dD]") 		ren `v' schid 
			else if regexm("`vlab'", "[Nn]etwork") 	ren `v' network
			else if regexm("`vlab'", "[tT]otal") 	ren `v' enroll
			else if regexm("`vlab'", "School") 		ren `v' school_name // in order with elses
		}
		// end foreach v in `r(varlist)'

		*Desting 5 digit string to float
		tostring schid, replace

		*dropmissing obs
		missings dropobs, force

		*drop CPS subtotal counters
		drop if mi(schid)
		gen year = `i'

		save "${temp}/enroll_`i'.dta", replace
	}
	// end forval 2013(1)$endyear

	forval i = 2013(1)$endyear {
		if `i' == 2013 {
			use "${temp}/enroll_`i'.dta", clear
			erase "${temp}/enroll_`i'.dta"
			continue
		}
		append using "${temp}/enroll_`i'.dta"
		erase "${temp}/enroll_`i'.dta"
	}

	drop if mi(schid)
	drop if schid == "."

	*save file out 
	save "${temp}/enroll.dta", replace


**B. FRL
	*Load 2017 and 2018 format
	forval i = 2017(1)$endyear {
		import excel using "${raw}/Demographics_LEPSPED_`i'.xls", sheet("Schools") first clear
		ren Network 	network
		ren SchoolID 	schid
		ren SchoolName 	school_name
		ren Total		enroll

		*dropmissing obs
		missings dropobs, force
		if `i' == 2017 {
			tostring schid, replace
		}

		gen year = `i'
		save "${temp}/frl_`i'.dta", replace
	}

	*Load 2013 to 2016 format
	forval i = 2013(1)2016 {
		import excel using "${raw}/Demographics_LEPSPED_`i'.xls", sheet("All Schools") first clear
		ren SchoolID 	schid
		ren Total		enroll

		if `i' == 2014 {
			ren EducationalUnitName 	school_name
			ren Network 				network
		}

		else {
			ren SchoolName 	school_name
			ren Networks 	network
		}

		*dropmissing obs
		missings dropobs, force
		missings dropvars, force
		drop if !regexm(schid, "[0-9][0-9][0-9][0-9][0-9][0-9]") // Drop note at bottom

		gen year = `i'
		save "${temp}/frl_`i'.dta", replace
	}

	*Load and append
	forval i = 2013(1)$endyear {
		if `i' == 2013 {
			use "${temp}/frl_`i'.dta", clear
			erase "${temp}/frl_`i'.dta"
			continue
		}
		append using "${temp}/frl_`i'.dta"
		erase "${temp}/frl_`i'.dta"
	}

	drop if mi(schid)
	drop if schid == "."

	*save file out 
	save "${temp}/frl.dta", replace


**C. Race and Ethnciity
	*Load 2017 and 2018 format
	forval i = 2017(1)$endyear {
		import excel using "${raw}/Demographics_RacialEthnic_`i'.xls", sheet("Schools") first clear
		ren Network 	network
		ren SchoolID 	schid
		ren SchoolName  school_name
		ren Total		enroll

		*dropmissing obs
		missings dropobs, force
		missings dropvars, force
		tostring schid, replace

		gen year = `i'
		save "${temp}/race_`i'.dta", replace
	}


	*Load 2014 to 2016 format
	forval i = 2014(1)2016 {
		import excel using "${raw}/Demographics_RacialEthnic_`i'.xls", sheet("Educational Units") first clear
		ren SchoolID 	schid
		ren Total		enroll
		ren Network 	network

		*dropmissing obs
		missings dropobs, force
		missings dropvars, force
		
		if `i' == 2014 {
			tostring schid, replace
			ren EducationalUnit school_name
		}

		else {
			drop if !regexm(schid, "[0-9][0-9][0-9][0-9][0-9][0-9]") // Drop note at bottom
			ren EducationUnits school_name
		}

		gen year = `i'
		save "${temp}/race_`i'.dta", replace
	}

	*2013 
	import excel using "${raw}/Demographics_RacialEthnic_2013.xls", sheet("All Schools") first clear
	ren Network 	network
	ren SchoolID 	schid
	ren School 		school_name
	ren Total		enroll

	*dropmissing obs
	missings dropobs, force
	missings dropvars, force
	tostring schid, replace

	gen year = 2013


**D. Append
	forval i = 2014(1)$endyear {
		append using "${temp}/race_`i'.dta"
		erase "${temp}/race_`i'.dta"
	}

	drop if mi(schid)
	drop if schid == "."

	*save file out 
	save "${temp}/race.dta", replace



******************************
* 2. Merge together and clean
******************************
*A.  Merge together
*B.  Asserts


**A. Merge together
	*Use enrollment
	use "${temp}/enroll.dta", clear

	*Merge on frl
	mmerge schid year using "${temp}/frl.dta", t(1:1) uname(frl_)

	*Drop five 0 enroll schools
	count if _merge == 1
	assert `r(N)' == 5
	drop if _merge == 1

	drop _merge

	*merge on race
	mmerge schid year using "${temp}/race.dta", t(1:1) uname(rac_)
	tab _merge
	assert _merge == 3
	drop _merge


**B. Clean
	*String clena var names
	replace school_name = strupper(school_name)
	replace rac_school_name = strupper(rac_school_name)

	*Create high school and elem school dummy
	egen hs_stu = rowtotal(g09 g10 g11 g12)
	egen es_stu = rowtotal(gk g01 g02 g03 g04 g05 g06 g07 g08)
	gen hs = hs_stu > es_stu
	gen es = es_stu >= hs_stu
	bys schid: egen hs_mode = mode(hs)
	bys schid: egen es_mode = mode(es)
	replace hs = hs_mode if hs != hs_mode
	replace es = es_mode if es != es_mode



***************************************
* 3. Save and clean
***************************************
*A. Var management
*B. Keep and Order
*C. Save and quit


**A. Variable management
	*ren from merge prefixes
	ren frl_frl_p 			frl_p
	ren frl_sped_p 			sped_p
	ren frl_esl_p 			esl_p
	ren rac_school_name 	sch_name_short
	ren school_name 		sch_name
	ren rac_white_p 		rac_wht_p
	ren rac_black_p 		rac_blk_p
	ren rac_asian_p 		rac_asn_p

	*Variable labels
	lab var schid 			"School ID, 6 Digit "
	lab var sch_name    	"School Name"
	lab var sch_name_short 	"School Name, Short version"
	lab var year 			"Spring School Year"
	lab var network 		"CPS Academic Network"
	lab var enroll 			"Number of Students Enrolled"
	lab var hs 				"Dummy=1; High School, any students"
	lab var es 				"Dummy=1; Elementary School, if not Grade 9,10,11,or 12"
	lab var rac_wht_p 		"Student % white"
	lab var rac_lat_p 		"Student % latin"
	lab var rac_blk_p 		"Student % black"
	lab var rac_asn_p 		"Student % asian"
	lab var sped_p 			"Student % with IEPs"
	lab var esl_p 			"Student % with English as second language"
	lab var frl_p 			"Student % receiving free and reduced price meals"


**B. Keep and Order
	*Variable return
	loc vars ///
		schid sch_name year network sch_name_short	/// ID Vars
		enroll hs es								/// Enrollment 
		rac_wht_p rac_lat_p rac_blk_p 				/// Race vars
		sped_p esl_p frl_p 							// Student Status

	ds `vars', not
	assert `: word count `r(varlist)'' == 40 // ensure nothing dropped
	keep `vars'
	order `vars'		

	*Compress
	compress


**C. Save and quit
	save "${data}//1a_demos_2013_$endyear.dta", replace
	
	*Erase tempfiles
	erase "${temp}/race.dta"
	erase "${temp}/frl.dta"
	erase "${temp}/enroll.dta"

	log c


**EOF**	
